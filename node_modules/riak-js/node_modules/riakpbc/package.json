{
  "name": "riakpbc",
  "version": "0.0.17",
  "description": "RiakPBC is a low-level Riak 1.4 proto buffer client.",
  "main": "index.js",
  "dependencies": {
    "protobuf.js": ">=0.0.18",
    "butils": "0.0.5"
  },
  "devDependencies": {
    "nodeunit": "",
    "async": "~0.2.9"
  },
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:nlf/riakpbc.git"
  },
  "keywords": [
    "riak",
    "pbc",
    "protobuf"
  ],
  "author": {
    "name": "Nathan",
    "email": "quitlahok@gmail.com",
    "url": "https://github.com/nlf"
  },
  "license": "MIT",
  "readme": "[![build status](https://secure.travis-ci.org/nlf/riakpbc.png)](http://travis-ci.org/nlf/riakpbc)\n[![NPM version](https://badge.fury.io/js/riakpbc.png)](http://badge.fury.io/js/riakpbc)\n[![Dependency Status](https://gemnasium.com/natural/riakpbc.png)](https://gemnasium.com/natural/riakpbc)\n\n# RiakPBC\nRiakPBC is a low-level [Riak 1.4](http://basho.com/riak)\n[protocol buffer](https://developers.google.com/protocol-buffers/docs/overview) client for\n[Node.js](http://nodejs.org/).  RiakPBC implements all of the API methods listed in the\n[Basho Riak Documentation](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/).\n\n\n## Contents\n  * [Install](#install)\n  * [Usage](#usage)\n  * [API](#api)\n    * [Bucket Methods](#bucket-methods)\n    * [Object/Key Methods](#objectkey-methods)\n    * [Query Methods](#query-methods)\n    * [Server Methods](#server-methods)\n    * [Connection Methods](#connection-methods)\n  * [License](#license)\n\n\n<a id=\"install\"></a>\n### Install\n\nInstallation is easy:\n```sh\n$ npm install riakpbc --save\n```\n\n\n<a id=\"usage\"></a>\n### Usage\nMake sure you've got a working Riak server and then connect to it in your\nprogram like this:\n\n```javascript\nvar riakpbc = require('riakpbc'),\n    client = riakpbc.createClient();\n```\n\nYou can specify host and port if your Riak server isn't local or if it's running\non a different port:\n\n```javascript\nvar client = riakpbc.createClient({host: 'riak.somewhere-else.com', port: 8086});\n```\n\n\n<a id=\"api\"></a>\n## API\n\nMaking requests to Riak is straight-forward.  You call methods on the client,\ntypically with a hash of options and a callback.  Inside the callback, you\nhandle the response from Riak.\n\nThe descriptions and examples below show the minimal arguments needed to\ncomplete each call.  In many cases, the `params` object can have additional keys\nand values to change the way the server handles and responds to the request.\nFollow the reference links to the official Basho docs for the details of each\nset of parameters .  You should also be familiar with the Riak\n[CAP Controls](http://docs.basho.com/riak/latest/dev/advanced/cap-controls/).\n\n\n<a id=\"bucket-methods\"></a>\n## Bucket Methods\n\n\n#### `client.getBuckets(callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/list-buckets/)\n\nThis method retrieves a list of buckets available on the server.  You shouldn't\nrun this in production.  This method takes no parameters, only a callback.\n\n```javascript\nclient.getBuckets(function (reply) {\n  var buckets = reply.buckets;\n  console.log('we have buckets:', buckets);\n});\n```\n\nThe callback will receive an object with a key `buckets` that has a value of an\narray of bucket names, each a string:\n\n```javascript\n{ buckets: [ 'chicken', 'ice-cream', 'jelly-beans' ] }\n```\n\n\n#### `client.getBucket(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/get-bucket-props/)\n\nThis call retrieves the properties of a bucket.  The `params` object should have\nonly one key, `bucket`, and its value should be the bucket name as a\nstring. Example:\n\n```javascript\nclient.getBucket({ bucket: 'test' }, function (reply) {\n  console.log('bucket properties:', reply.props);\n});\n```\n\nThis will output something like this:\n\n```javascript\n{ props:\n   { n_val: 3,\n     allow_mult: false,\n     last_write_wins: false,\n     has_precommit: true,\n     ... } }\n```\n\n\n#### `client.setBucket(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/set-bucket-props/)\n\nThis method changes the bucket properties.  Supply the bucket name via `bucket`\nand properties via `props`.  Example:\n\n```javascript\nclient.setBucket({ bucket: 'test', props: { allow_mult: true }}, function (reply) {\n  if (!reply.errmsg) {\n    console.log('bucket allows multiple versions.');\n  }\n});\n```\nThe callback response will be empty on success.\n\n\n#### `client.resetBucket(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/http/reset-bucket-props/)\n\nThis method resets the bucket properties to default values.  Supply a bucket\nname in the `params`:\n\n```javascript\nclient.resetBucket({ bucket: 'test' }, function (reply) {\n  if (!reply.errmsg) {\n    console.log('bucket properties restored.');\n  }\n});\n```\nThe callback response will be empty on success.\n\n\n#### `client.getKeys(params, [streaming], callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/list-keys/)\n\nThis method retrieves keys from the specified bucket.  Don't use it in\nproduction.\n\nThe first form retrieves the keys in one call:\n\n```javascript\nclient.getKeys({ bucket: 'test' }, function (reply) {\n  var keys = reply.keys;\n  keys.forEach(function (key) {\n    console.log('key:', key)\n  });\n});\n```\n\nThe second form returns an event emitter that receives streamed keys:\n\n```javascript\nclient.getKeys({ bucket: 'test' }, true).on('data', function (reply) {\n  console.log('batch of keys:', reply.keys);\n});\n```\n\n\n<a id=\"objectkey-methods\"></a>\n## Object/Key Methods\n\n#### `client.get(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/fetch-object/)\n\nThis method fetches an object from Riak.  Example:\n\n```javascript\nclient.get({ bucket: 'test', key: 'the-ballad-of-john-henry' }, function (reply) {\n  console.log('found song:', reply.content.value);\n});\n```\n\n\n#### `client.put(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/store-object/)\n\nThis method sends data to Riak for storage.  Use it like this:\n\n```javascript\nvar song = { title: 'Jockey Full of Bourbon', writer: 'Tom Waits', performer: 'Joe Bonamassa' },\n    request = { bucket: 'test', key: 'bourbon', content: { value: JSON.stringify(song), content_type: 'application/json' } };\n\nclient.put(request, function (reply) {\n  console.log(reply);\n});\n```\n\nThe reply will be empty unless the `return_body` key is set to `true`.  In that\ncase, the response will be similar to a `get` response.\n\nThe request can contain a `vclock` key, which typically comes from a `get`\nrequest or a `put` request with `return_body: true`.  You should send the\n`vclock` to help Riak resolve conflicts.  See the\n[Vector Clocks](http://docs.basho.com/riak/latest/theory/concepts/Vector-Clocks/)\ndocumentation for an introduction to vector clocks.\n\n\n#### `client.del(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/delete-object/)\n\nThis method removes a key from a bucket.  Specify the bucket and the key:\n\n```javascript\nclient.del({ bucket: 'test', song: 'thriller' }, function (reply) {\n  console.log('it was totally overrated.');\n});\n```\n\n\n#### `client.updateCounter(params, callback)`\n(no reference docs)\n\nThis method sets or updates a counter (a nifty type of\n[CRDT](http://pagesperso-systeme.lip6.fr/Marc.Shapiro/papers/RR-6956.pdf)).\nMake sure you pass in a key `amount` with an integer value; the counter will be\nincremented by that value.  You can pass in `returnvalue: true` to fetch the\nupdated counter.\n\nNB: the bucket containing the key must have the property `allow_mult` set to\n`true`.\n\n```javascript\nclient.updateCounter({ bucket: 'test', key: 'times-i-mispell-definitely', amount: 31415 }, function (reply) {\n  console.log('how bad is it? this many:', reply.value);\n});\n```\n\n\n#### `client.getCounter(params, callback)`\n(no reference docs)\n\nThis method gets a counter value.  Specify the name of the bucket and key in the\n`params` object.  Example:\n\n```javascript\nclient.getCounter({ bucket: 'test', key: 'times-i-mispell-definitely' }, function (reply) {\n  console.log('how bad is it? this many:', reply.value);\n});\n```\n\n\n<a id=\"query-methods\"></a>\n## Query Methods\n\n#### `client.mapred(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/mapreduce/)\n\nThis method invokes a map reduce query on the Riak server.  The parameters to\nthe method aren't as simple as most, so it's easier to see what's going on if\nyou break down the objects into smaller chunks.\n\n```javascript\nvar request = {\n  inputs: [[\"test\", \"test\"]],  // array [bucket, key] or [bucket, key, keydata]\n  query: [\n    {\n      map: {\n        source: 'function (v) { return [[v.bucket, v.key]]; }',\n        language: 'javascript',\n        keep: true\n      }\n    },\n    {\n      map: {\n        name: 'Riak.mapValuesJson',\n        language: 'javascript',\n        keep: true\n      }\n    }\n    ]\n};\n```\n\nWith the request object, writing the map reduce call is more clear:\n\n```javascript\nclient.mapred({ request: JSON.stringify(request), content_type: 'application/json' }, function (reply) {\n  console.log('first map reduce reply: %s', reply[0]);\n});\n```\nSee the tutorial page\n[Loading Data and Running MapReduce](http://docs.basho.com/riak/latest/tutorials/fast-track/Loading-Data-and-Running-MapReduce-Queries/)\nand the\n[Advanced MapReduce](http://docs.basho.com/riak/latest/dev/advanced/mapreduce/)\ndoc for more details and examples.\n\n\n#### `client.getIndex(query, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/secondary-indexes/)\n\nThis method makes a secondary index query on the server.  Supply a bucket, an\nindex, and a query type:\n\n```javascript\nvar query = { bucket: 'friends', index: 'name_bin', qtype: 0, key: 'Joe' };\nclient.getIndex(query, function (reply) {\n  console.log('found keys:', reply.keys);\n});\n```\n\nWith the `qtype` `0`, you must supply `key`, with `qtype` `1`, you must supply\n`range_min` and `range_max` values.\n\nNB: 2i index queries only work when the index exists.  Pass an `indexes` array\nas part of your `put` calls to index objects as they're stored:\n\n```javascript\nclient.put({ bucket: '...', content: { value: '...', indexes: [{ key: 'name_bin', value: user.first_name }] } }, ...) function (...) {\n  ...\n});\n```\n\n\n#### `client.search(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/search/)\n\nThis method sends a search request to the server.  Specify the index name with\nthe `index` key and the query with the `q` key.  Example:\n\n```javascript\nclient.search({ index: 'test', q: 'name:john' }, function (reply) {\n  console.log('searched and found:', reply);\n});\n```\n\n\n<a id=\"server-methods\"></a>\n## Server Methods\n\n\n#### `client.ping(callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/ping/)\n\nThis method can be used to test availability of the server.  This method takes\nno parameters, only a callback.\n\n```javascript\nclient.ping(function (reply) {\n  if (!reply.errmsg) {\n    console.log('pong');\n  }\n});\n```\n\n\n#### `client.setClientId(params, callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/set-client-id/)\n\nThis method sets the client identifier, which helps the server resolve conflicts\nand reduce vector clock bloat.\n\n```javascript\nclient.setClientId({ client_id: 'the man from uncle' }, function (reply) {\n  console.log(!reply.errmsg);\n});\n```\n\n\n#### `client.getClientId(callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/get-client-id/)\n\nThis method gets the client identifier. This method takes no parameters, only a\ncallback.\n\n```javascript\nclient.getClientId(function (reply) {\n  console.log(reply);\n});\n```\n\n\n#### `client.getServerInfo(callback)`\n[reference](http://docs.basho.com/riak/latest/dev/references/protocol-buffers/server-info/)\n\nThis method gets the node name and software version from the server. This method\ntakes no parameters, only a callback.\n\n```javascript\nclient.getServerInfo(function (reply) {\n  console.log('node:', reply.node);\n  console.log('server version:', reply.server_version);\n});\n```\n\n<a id=\"connection-methods\"></a>\n## Connection Methods\n\n#### `client.connect(callback)`\n\nThis method connects the client to the server.  The callback function will be\ncalled when the connection is established:\n\n```javascript\nclient.connect(function () {\n  console.log('connected to %s on port %s', client.host, client.port);\n});\n```\n\nThis method has no effect if the client is already connected.\n\n\n#### `client.disconnect()`\n\nThis method disconnects the client from the server.  It takes no parameters and\nreturns no value.  If the client is not connected, this method has no effect.\n\n```javascript\nclient.disconnect();\n```\n\n\n<a id=\"license\"></a>\n### License\n\n[The MIT License (MIT)](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Nathan LaFreniere\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nlf/riakpbc/issues"
  },
  "homepage": "https://github.com/nlf/riakpbc",
  "_id": "riakpbc@0.0.17",
  "_from": "riakpbc@0.0.17"
}
